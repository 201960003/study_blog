---
layout: post
title:  ⌜HTML⌟ 스티커 추가 및 그림 그리기 기능
date:   2025-01-26 +0900
categories: HTML
---
<style>
    #drawing-canvas {
        border: 1px solid black;
        background-color: white;
        display: block;
        /* margin: 20px auto; */
    }

     /*  color-picker  */
    .color-picker {
        display: flex;
        margin-bottom: 10px;
    }

    .color-button {
        position: relative;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        margin: 5px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .color-button span {
        display: none;
        color: white;
        font-size: 20px;
    }

    .color-button.selected span {
        display: block;
    }

    .black { background-color: black; color: white; }
    .red { background-color: red; }
    .orange { background-color: orange; }
    .yellow { background-color: yellow; }
    .green { background-color: green; }
    .blue { background-color: blue; }
    .indigo { background-color: indigo; }
    .violet { background-color: violet; }


    .sticker-container {
        width: 50%;
        height: 30%
    }

    .sticker {
        width: 100px;
        height: 100px;
    }
</style>
<div class="canvas-container">
    <canvas id="background-canvas" width="500" height="500"></canvas>
    <canvas id="drawing-canvas" width="500" height="500"></canvas>
</div>

<div class="controls">
    <label for="line-width">선 두께: </label>
    <input type="range" id="line-width" min="1" max="10" value="1">
    <button id="eraser">지우개 켜기</button>
    <button id="allclear">모두 지우기</button>
</div>
        
<div class="color-picker">
    <div class="color-button black selected" data-color="black"><span>&#10003;</span></div>
    <div class="color-button red" data-color="red"><span>&#10003;</span></div>
    <div class="color-button orange" data-color="orange"><span>&#10003;</span></div>
    <div class="color-button yellow" data-color="yellow"><span>&#10003;</span></div>
    <div class="color-button green" data-color="green"><span>&#10003;</span></div>
    <div class="color-button blue" data-color="blue"><span>&#10003;</span></div>
    <div class="color-button indigo" data-color="indigo"><span>&#10003;</span></div>
    <div class="color-button violet" data-color="violet"><span>&#10003;</span></div>
</div>

<div class=sticker-container>
    <img class="sticker" src="https://github.com/201960003/study_blog/blob/main/img/post25/four_leaf_clover.png?raw=true">
    <img class="sticker" src="https://github.com/201960003/study_blog/blob/main/img/post25/three_leaf_clover.png?raw=true">
</div>
        
<button id="save" onclick="saveCanvas()">저장</button>

<script>
    // Canvas 요소 가져오기
    var stickerBoard = document.getElementById("background-canvas");
    var stickerContext = stickerBoard.getContext("2d");

    var draggedSticker = null; // 현재 드래그 중인 스티커
    var offsetX = 0; // 터치 또는 드래그 시작 시 X 오프셋
    var offsetY = 0; // 터치 또는 드래그 시작 시 Y 오프셋

    // 스티커 클릭 및 터치 이벤트
    const stickers = document.querySelectorAll('.sticker');
    stickers.forEach(sticker => {
        sticker.addEventListener('mousedown', onStickerGrab);
        sticker.addEventListener('touchstart', onStickerGrab, { passive: false });
    });

    // 캔버스에 마우스 및 터치 이벤트 추가
    stickerBoard.addEventListener('mousemove', onStickerMove);
    stickerBoard.addEventListener('mouseup', onStickerDrop);
    stickerBoard.addEventListener('mouseleave', onStickerDrop);
    stickerBoard.addEventListener('touchmove', onStickerMove, { passive: false });
    stickerBoard.addEventListener('touchend', onStickerDrop);

    // 스티커 잡기
    function onStickerGrab(e) {
        e.preventDefault();

        // 터치 또는 마우스 이벤트에서 스티커 요소 가져오기
        draggedSticker = e.target;
        const rect = draggedSticker.getBoundingClientRect();

        if (e.touches) {
            // 터치 이벤트
            offsetX = e.touches[0].clientX - rect.left;
            offsetY = e.touches[0].clientY - rect.top;
        } else {
            // 마우스 이벤트
            offsetX = e.clientX - rect.left;
            offsetY = e.clientY - rect.top;
        }
    }

    // 스티커 이동
    function onStickerMove(e) {
        if (!draggedSticker) return;

        e.preventDefault();
        const rect = stickerBoard.getBoundingClientRect();

        let x, y;
        if (e.touches) {
            x = e.touches[0].clientX - rect.left - offsetX;
            y = e.touches[0].clientY - rect.top - offsetY;
        } else {
            x = e.clientX - rect.left - offsetX;
            y = e.clientY - rect.top - offsetY;
        }

        // 현재 위치에 스티커 미리보기 (옵션)
        stickerContext.clearRect(0, 0, stickerBoard.width, stickerBoard.height);
        stickerContext.drawImage(draggedSticker, x, y, 100, 100); // 크기 조정
    }

    // 스티커 놓기
    function onStickerDrop(e) {
        if (!draggedSticker) return;

        e.preventDefault();
        const rect = stickerBoard.getBoundingClientRect();

        let x, y;
        if (e.changedTouches) {
            x = e.changedTouches[0].clientX - rect.left - offsetX;
            y = e.changedTouches[0].clientY - rect.top - offsetY;
        } else {
            x = e.clientX - rect.left - offsetX;
            y = e.clientY - rect.top - offsetY;
        }

        // 스티커를 캔버스에 그리기
        stickerContext.drawImage(draggedSticker, x, y, 100, 100);

        // 드래그 상태 초기화
        draggedSticker = null;
    }
</script>


<!-- <br><br> -->

### 🧐 오늘의 소감은?
최종적으로 이미지를 프로젝트 폴더 안에 public 폴더 안에 직접 사진을 넣어서 작업을 한 부분이 아쉽긴 하지만 그래도 이 코드 이후에 확장성이 좋다고 생각을 하기 떄문에 살짝 뿌듯... 함이 있긴 합니다. 최근 플러터로 작업을 하다가 이렇게 웹으르 조금 다루니까 살짝 재미있어진 것 같아요. 요즘 아직 간단한것만 하는데 그래도 점점 어려운 것도 해내는 아기 개발자가 되고 싶어요!! 열심히 빠샤빠샤

<br>