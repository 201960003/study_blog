---
layout: post
title:  ‚åúHTML‚åü Ïä§Ìã∞Ïª§ Ï∂îÍ∞Ä Î∞è Í∑∏Î¶º Í∑∏Î¶¨Í∏∞ Í∏∞Îä•
date:   2024-09-24 +0900
categories: HTML
---


### ü§ì Ï†ÑÏ≤¥ ÏΩîÎìú
  ``` html
   <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>ÏÇ¨ÏßÑÍæ∏ÎØ∏Í∏∞</title>
        <!-- jquery -->
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

        <style>
            /* canvas */
            .canvas-container {
                position: relative;
                width: 500px;
                height: 500px;
            }

            .canvas-container canvas {
                position: absolute;
                top: 0;
                left: 0;
                border: 1px solid #000;
                cursor: crosshair;
            }

            /* line-controll  */
            .controls {
                margin-bottom: 10px;
            }


            /*  color-picker  */
            .color-picker {
                display: flex;
                margin-bottom: 10px;
            }

            .color-button {
                position: relative;
                width: 30px;
                height: 30px;
                border-radius: 50%;
                margin: 5px;
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .color-button span {
                display: none;
                color: white;
                font-size: 20px;
            }

            .color-button.selected span {
                display: block;
            }

            .black { background-color: black; color: white; }
            .red { background-color: red; }
            .orange { background-color: orange; }
            .yellow { background-color: yellow; }
            .green { background-color: green; }
            .blue { background-color: blue; }
            .indigo { background-color: indigo; }
            .violet { background-color: violet; }

        </style>

    </head>
    <body>
        <h1>Ï∫îÎ≤ÑÏä§Ïóê ÎßàÏö∞Ïä§Î°ú Í∑∏Î¶º Í∑∏Î¶¨Í∏∞</h1>
        <div class="controls">
            <label for="line-width">ÏÑ† ÎëêÍªò: </label>
            <input type="range" id="line-width" min="1" max="10" value="1">
            <button id="eraser">ÏßÄÏö∞Í∞ú ÏºúÍ∏∞</button>
            <button id="allclear">Î™®Îëê ÏßÄÏö∞Í∏∞</button>
        </div>
        
        <div class="color-picker">
            <div class="color-button black selected" data-color="black"><span>&#10003;</span></div>
            <div class="color-button red" data-color="red"><span>&#10003;</span></div>
            <div class="color-button orange" data-color="orange"><span>&#10003;</span></div>
            <div class="color-button yellow" data-color="yellow"><span>&#10003;</span></div>
            <div class="color-button green" data-color="green"><span>&#10003;</span></div>
            <div class="color-button blue" data-color="blue"><span>&#10003;</span></div>
            <div class="color-button indigo" data-color="indigo"><span>&#10003;</span></div>
            <div class="color-button violet" data-color="violet"><span>&#10003;</span></div>
        </div>
        
      
        <button id="save">Ï†ÄÏû•</button>

        <div class="canvas-container">
            <canvas id="background-canvas" width="500" height="500"></canvas>
            <canvas id="drawing-canvas" width="500" height="500"></canvas>
        </div>
        <script>

            // canvas part
            var backgroundCanvas = document.getElementById("background-canvas"); // Í∑∏Î¶º Î∞∞Í≤Ω canvas
            var drawingCanvas = document.getElementById("drawing-canvas"); // ÏÑ† Í∑∏Î¶¨Í∏∞ canvas

            var backgroundContext = backgroundCanvas.getContext("2d"); // backgroundCanvasÏùò context
            var drawingContext = drawingCanvas.getContext("2d"); // drawingContextÏùò context

            var image = new Image();
            window.onload = drawImage();

            function drawImage() {
                const canvasWidth = backgroundCanvas.width;
                const canvasHeight = backgroundCanvas.height;

                image.onload = () => {
                    backgroundContext.drawImage(image, 0, 0, canvasWidth, canvasHeight);
                };
                image.onerror = () => {
                    console.error('Error loading image:', image.src);
                };
                image.src = 'IMG_5445.jpg'; 
            }

                function saveCanvas() {
                    var compositeCanvas = document.createElement('canvas'); // Í∑∏Î¶º + ÏÑ† Ï∫†ÌçºÏä§ Ìï©ÏπòÍ∏∞ ÏúÑÌïú canvas ÏÉùÏÑ±
                    compositeCanvas.width = backgroundCanvas.width;
                    compositeCanvas.height = backgroundCanvas.height;
                    var compositeContext = compositeCanvas.getContext('2d'); //  compositeCanvasÏùò context ÏÉùÏÑ±

                    // Î∞∞Í≤Ω Ï∫îÎ≤ÑÏä§ÏôÄ ÎìúÎ°úÏûâ Ï∫îÎ≤ÑÏä§Î•º Ìï©Ïπ®
                    compositeContext.drawImage(backgroundCanvas, 0, 0);
                    compositeContext.drawImage(drawingCanvas, 0, 0);

                    // Ìï©Ïπú Ï∫îÎ≤ÑÏä§Î•º Ïù¥ÎØ∏ÏßÄÎ°ú Î≥ÄÌôòÌïòÏó¨ Îã§Ïö¥Î°úÎìú
                    var dataURL = compositeCanvas.toDataURL('image/png');
                    var link = document.createElement('a');
                    link.href = dataURL;
                    link.download = `${getCurrentDateTimeString()}.png`;
                    link.click();
                }

                function getCurrentDateTimeString() {
                    var today = new Date();
                    var year = today.getFullYear();
                    var month = String(today.getMonth() + 1).padStart(2, '0');
                    var day = String(today.getDate()).padStart(2, '0');
                    var hours = String(today.getHours()).padStart(2, '0');
                    var minutes = String(today.getMinutes()).padStart(2, '0');
                    var seconds = String(today.getSeconds()).padStart(2, '0');

                    // Return formatted date and time string
                    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
                }

                document.getElementById('save').addEventListener('click', saveCanvas);





            // line-controller part

            var lastX = 0; // ÎßàÏßÄÎßâ ÎßàÏö∞Ïä§ ÏúÑÏπò x Í∞í
            var lastY = 0; // ÎßàÏßÄÎßâ ÎßàÏö∞Ïä§ ÏúÑÏπò y Í∞í
            var isDrawing = false; // Í∑∏Î¶¨Í∏∞ ÏÉÅÌÉú, false : ÏïàÍ∑∏Î¶¨Í∏∞
            var strokeStyle = 'black';  // Í∏∞Î≥∏ ÏÑ† ÏÉâÏÉÅ
            var lineWidth = 1; // Í∏∞Î≥∏ ÏÑ† ÎëêÍªò
            var lineCap = "round";  // Í∏∞Î≥∏ ÏÑ† Î™®Ïñë
            var isErasing = false;  // ÏßÄÏö∞Í∞ú Î™®Îìú Ïó¨Î∂Ä


            function handleMouseDown(event) {
                // ÎßàÏö∞Ïä§ ÌÅ¥Î¶≠ÌñàÏùÑ Îïå Ïã§ÌñâÎêòÎäî Ìï®Ïàò
                isDrawing = true;
                [lastX, lastY] = [event.offsetX, event.offsetY];
                // ÌòÑÏû¨ ÎßàÏö∞Ïä§ ÏúÑÏπòÏù∏ [event.offsetX, event.offsetY] Î•º Í∞ÅÍ∞Å lastX, lastY Ïóê Ï†ÄÏû•
            }


            function handleMouseMove(event) {
                // ÎßàÏö∞Ïä§Í∞Ä canvas ÌÉúÍ∑∏ÎÇ¥ÏóêÏÑú ÏõÄÏßÅÏòÄÏùÑ Îïå Ïã§ÌñâÎêòÎäî Ìï®Ïàò

                if (!isDrawing) return;  // isDrawingÏù¥ falseÏùº ÎïåÎäî returnÏúºÎ°ú Ìï®ÏàòÎ•º Ï¢ÖÎ£å

                // ÎßàÏö∞Ïä§Í∞Ä ÏõÄÏßÅÏùº Îïå isDrawingÏù¥ trueÏù¥Î©¥ ÌòÑÏû¨ ÏúÑÏπòÎ•º Í∞ÄÏ†∏Ïò¥
                const currentX = event.offsetX;
                const currentY = event.offsetY;

                drawingContext.lineWidth = lineWidth; // ÏßÄÏ†ïÌïú ÏÑ† ÎëêÍªò
                drawingContext.strokeStyle = strokeStyle; // ÏßÄÏ†ïÌïú ÏÑ† ÏÉâÏÉÅ
                drawingContext.lineCap = lineCap; // ÏßÄÏ†ïÌïú ÏÑ† Î™®Ïñë

                drawingContext.beginPath(); // contextÏùò ÏÉàÎ°úÏö¥ Í≤ΩÎ°úÎ•º ÏãúÏûë
                drawingContext.moveTo(lastX, lastY); // ÎßàÏßÄÎßâ ÎßàÏö∞Ïä§ ÏúÑÏπò
                drawingContext.lineTo(currentX, currentY); // moveToÎ°ú ÏßÄÏ†ïÌïú Ïù¥Ï†Ñ ÎßàÏö∞Ïä§ ÏúÑÏπòÏóêÏÑú ÌòÑÏû¨ ÎßàÏö∞Ïä§ ÏúÑÏπòÍπåÏßÄ ÏÑ† Í∑∏Î¶¨Í∏∞


                if (isErasing) {
                    drawingContext.globalCompositeOperation = 'destination-out';
                    drawingContext.stroke();
                    drawingContext.globalCompositeOperation = 'source-over';
                } else {
                    drawingContext.stroke();
                }
                
                // drawingContext.closePath(); // contextÏùò Í≤ΩÎ°úÎ•º Ï¢ÖÎ£å


                [lastX, lastY] = [currentX, currentY]; // ÌòÑÏû¨ ÏúÑÏπòÎ•º Ï†ÄÏû•
            }

            function handleMouseUp() {
                // ÎßàÏö∞Ïä§ ÌÅ¥Î¶≠ Ìï¥Ï†úÌñàÏùÑ Îïå Ïã§ÌñâÎêòÎäî Ìï®Ïàò
                isDrawing = false;
            }

            function handleMouseLeave() {
                // ÎßàÏö∞Ïä§Í∞Ä canvas ÌÉúÍ∑∏Î•º Î≤óÏñ¥ÎÇ¨ÏùÑ Îïå Ïã§ÌñâÎêòÎäî Ìï®Ïàò
                isDrawing = false;
            }

            // ÏÑ† ÎëêÍªò Ïä¨ÎùºÏù¥Îçî Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
            document.getElementById('line-width').addEventListener('input', function() {
                lineWidth = this.value;
            });

            // ÏßÄÏö∞Í∞ú Î≤ÑÌäº ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
            document.getElementById('eraser').addEventListener('click', function() {
                isErasing = !isErasing;  // ÏßÄÏö∞Í∞ú Î™®ÎìúÎ•º ÌÜ†Í∏Ä
                if (isErasing) {
                    this.textContent = 'ÏßÄÏö∞Í∞ú ÎÅÑÍ∏∞';
                    // document.querySelectorAll('.color-button').forEach(btn => btn.classList.remove('selected'));  // Î™®Îì† ÏÉâÏÉÅ Î≤ÑÌäº ÏÑ†ÌÉù Ìï¥Ï†ú
                } else {
                    this.textContent = 'ÏßÄÏö∞Í∞ú ÏºúÍ∏∞';
                }
            });

            document.querySelectorAll('.color-button').forEach(button => {
                button.addEventListener('click', function() {
                    document.querySelectorAll('.color-button').forEach(btn => btn.classList.remove('selected')); // Í∏∞Ï°¥Ïóê Ï≤¥ÌÅ¨ÎêòÏóàÎçò ÏÉâÏÉÅÏùÄ Ìï¥Ï†ú
                    this.classList.add('selected'); // ÏÑ†ÌÉùÌïúÍ±¥ Ï≤¥ÌÅ¨ÌëúÏãú ÎÇòÏò§Í≤å
                    strokeStyle = this.getAttribute('data-color'); // data-color ÏÜçÏÑ±Í∞íÏúºÎ°ú ÏßÄÏ†ïÌïú ÏÑπÏÉÅÎ≥ÄÍ≤Ω
                    isErasing = false;  // ÏßÄÏö∞Í∞ú Î™®ÎìúÎ•º Ìï¥Ï†ú
                });
            });



            drawingCanvas.addEventListener('mousedown', handleMouseDown);
            drawingCanvas.addEventListener('mousemove', handleMouseMove);
            drawingCanvas.addEventListener('mouseup', handleMouseUp);
            drawingCanvas.addEventListener('mouseleave', handleMouseLeave);



            document.getElementById('allclear').addEventListener('click', function() {
                drawingContext.clearRect(0, 0, drawingCanvas.width, drawingCanvas.height);
            }); // Î™®Îëê ÏßÄÏö∞Í∏∞


        </script>
    </body>
    </html>

  ```

ÏïÑÎûòÎäî Î∞∞Í≤ΩÌôîÎ©¥ Ï∂îÍ∞Ä ÏïàÌïòÍ≥† ÏûëÏóÖÌïú Í≤∞Í≥ºÎ¨ºÏûÖÎãàÎã§. 
  
  <div class="controls">
    <label for="line-width">ÏÑ† ÎëêÍªò: </label>
    <input type="range" id="line-width" min="1" max="10" value="1">
    <button id="eraser">ÏßÄÏö∞Í∞ú ÏºúÍ∏∞</button>
    <button id="allclear">Î™®Îëê ÏßÄÏö∞Í∏∞</button>
  </div>
        
  <div class="color-picker">
    <div class="color-button black selected" data-color="black"><span>&#10003;</span></div>
    <div class="color-button red" data-color="red"><span>&#10003;</span></div>
    <div class="color-button orange" data-color="orange"><span>&#10003;</span></div>
    <div class="color-button yellow" data-color="yellow"><span>&#10003;</span></div>
    <div class="color-button green" data-color="green"><span>&#10003;</span></div>
    <div class="color-button blue" data-color="blue"><span>&#10003;</span></div>
    <div class="color-button indigo" data-color="indigo"><span>&#10003;</span></div>
    <div class="color-button violet" data-color="violet"><span>&#10003;</span></div>
  </div>
        
      
  <button id="save">Ï†ÄÏû•</button>

  <div class="canvas-container">
      <!-- <canvas id="background-canvas" width="500" height="500"></canvas> -->
      <canvas id="drawing-canvas" width="500" height="500"></canvas>
  </div>

  

  <script>
    // canvas part
    var drawingCanvas = document.getElementById("drawing-canvas"); // ÏÑ† Í∑∏Î¶¨Í∏∞ canvas
    var drawingContext = drawingCanvas.getContext("2d"); // drawingContextÏùò context

    function saveCanvas() {
                    var compositeCanvas = document.createElement('canvas'); // Í∑∏Î¶º + ÏÑ† Ï∫†ÌçºÏä§ Ìï©ÏπòÍ∏∞ ÏúÑÌïú canvas ÏÉùÏÑ±
                    compositeCanvas.width = backgroundCanvas.width;
                    compositeCanvas.height = backgroundCanvas.height;
                    var compositeContext = compositeCanvas.getContext('2d'); //  compositeCanvasÏùò context ÏÉùÏÑ±

                    // Î∞∞Í≤Ω Ï∫îÎ≤ÑÏä§ÏôÄ ÎìúÎ°úÏûâ Ï∫îÎ≤ÑÏä§Î•º Ìï©Ïπ®
                    compositeContext.drawImage(backgroundCanvas, 0, 0);
                    compositeContext.drawImage(drawingCanvas, 0, 0);

                    // Ìï©Ïπú Ï∫îÎ≤ÑÏä§Î•º Ïù¥ÎØ∏ÏßÄÎ°ú Î≥ÄÌôòÌïòÏó¨ Îã§Ïö¥Î°úÎìú
                    var dataURL = compositeCanvas.toDataURL('image/png');
                    var link = document.createElement('a');
                    link.href = dataURL;
                    link.download = `${getCurrentDateTimeString()}.png`;
                    link.click();
                }

                function getCurrentDateTimeString() {
                    var today = new Date();
                    var year = today.getFullYear();
                    var month = String(today.getMonth() + 1).padStart(2, '0');
                    var day = String(today.getDate()).padStart(2, '0');
                    var hours = String(today.getHours()).padStart(2, '0');
                    var minutes = String(today.getMinutes()).padStart(2, '0');
                    var seconds = String(today.getSeconds()).padStart(2, '0');

                    // Return formatted date and time string
                    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
                }

                document.getElementById('save').addEventListener('click', saveCanvas);





            // line-controller part

            var lastX = 0; // ÎßàÏßÄÎßâ ÎßàÏö∞Ïä§ ÏúÑÏπò x Í∞í
            var lastY = 0; // ÎßàÏßÄÎßâ ÎßàÏö∞Ïä§ ÏúÑÏπò y Í∞í
            var isDrawing = false; // Í∑∏Î¶¨Í∏∞ ÏÉÅÌÉú, false : ÏïàÍ∑∏Î¶¨Í∏∞
            var strokeStyle = 'black';  // Í∏∞Î≥∏ ÏÑ† ÏÉâÏÉÅ
            var lineWidth = 1; // Í∏∞Î≥∏ ÏÑ† ÎëêÍªò
            var lineCap = "round";  // Í∏∞Î≥∏ ÏÑ† Î™®Ïñë
            var isErasing = false;  // ÏßÄÏö∞Í∞ú Î™®Îìú Ïó¨Î∂Ä


            function handleMouseDown(event) {
                // ÎßàÏö∞Ïä§ ÌÅ¥Î¶≠ÌñàÏùÑ Îïå Ïã§ÌñâÎêòÎäî Ìï®Ïàò
                isDrawing = true;
                [lastX, lastY] = [event.offsetX, event.offsetY];
                // ÌòÑÏû¨ ÎßàÏö∞Ïä§ ÏúÑÏπòÏù∏ [event.offsetX, event.offsetY] Î•º Í∞ÅÍ∞Å lastX, lastY Ïóê Ï†ÄÏû•
            }


            function handleMouseMove(event) {
                // ÎßàÏö∞Ïä§Í∞Ä canvas ÌÉúÍ∑∏ÎÇ¥ÏóêÏÑú ÏõÄÏßÅÏòÄÏùÑ Îïå Ïã§ÌñâÎêòÎäî Ìï®Ïàò

                if (!isDrawing) return;  // isDrawingÏù¥ falseÏùº ÎïåÎäî returnÏúºÎ°ú Ìï®ÏàòÎ•º Ï¢ÖÎ£å

                // ÎßàÏö∞Ïä§Í∞Ä ÏõÄÏßÅÏùº Îïå isDrawingÏù¥ trueÏù¥Î©¥ ÌòÑÏû¨ ÏúÑÏπòÎ•º Í∞ÄÏ†∏Ïò¥
                const currentX = event.offsetX;
                const currentY = event.offsetY;

                drawingContext.lineWidth = lineWidth; // ÏßÄÏ†ïÌïú ÏÑ† ÎëêÍªò
                drawingContext.strokeStyle = strokeStyle; // ÏßÄÏ†ïÌïú ÏÑ† ÏÉâÏÉÅ
                drawingContext.lineCap = lineCap; // ÏßÄÏ†ïÌïú ÏÑ† Î™®Ïñë

                drawingContext.beginPath(); // contextÏùò ÏÉàÎ°úÏö¥ Í≤ΩÎ°úÎ•º ÏãúÏûë
                drawingContext.moveTo(lastX, lastY); // ÎßàÏßÄÎßâ ÎßàÏö∞Ïä§ ÏúÑÏπò
                drawingContext.lineTo(currentX, currentY); // moveToÎ°ú ÏßÄÏ†ïÌïú Ïù¥Ï†Ñ ÎßàÏö∞Ïä§ ÏúÑÏπòÏóêÏÑú ÌòÑÏû¨ ÎßàÏö∞Ïä§ ÏúÑÏπòÍπåÏßÄ ÏÑ† Í∑∏Î¶¨Í∏∞


                if (isErasing) {
                    drawingContext.globalCompositeOperation = 'destination-out';
                    drawingContext.stroke();
                    drawingContext.globalCompositeOperation = 'source-over';
                } else {
                    drawingContext.stroke();
                }
                
                // drawingContext.closePath(); // contextÏùò Í≤ΩÎ°úÎ•º Ï¢ÖÎ£å


                [lastX, lastY] = [currentX, currentY]; // ÌòÑÏû¨ ÏúÑÏπòÎ•º Ï†ÄÏû•
            }

            function handleMouseUp() {
                // ÎßàÏö∞Ïä§ ÌÅ¥Î¶≠ Ìï¥Ï†úÌñàÏùÑ Îïå Ïã§ÌñâÎêòÎäî Ìï®Ïàò
                isDrawing = false;
            }

            function handleMouseLeave() {
                // ÎßàÏö∞Ïä§Í∞Ä canvas ÌÉúÍ∑∏Î•º Î≤óÏñ¥ÎÇ¨ÏùÑ Îïå Ïã§ÌñâÎêòÎäî Ìï®Ïàò
                isDrawing = false;
            }

            // ÏÑ† ÎëêÍªò Ïä¨ÎùºÏù¥Îçî Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
            document.getElementById('line-width').addEventListener('input', function() {
                lineWidth = this.value;
            });

            // ÏßÄÏö∞Í∞ú Î≤ÑÌäº ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
            document.getElementById('eraser').addEventListener('click', function() {
                isErasing = !isErasing;  // ÏßÄÏö∞Í∞ú Î™®ÎìúÎ•º ÌÜ†Í∏Ä
                if (isErasing) {
                    this.textContent = 'ÏßÄÏö∞Í∞ú ÎÅÑÍ∏∞';
                    // document.querySelectorAll('.color-button').forEach(btn => btn.classList.remove('selected'));  // Î™®Îì† ÏÉâÏÉÅ Î≤ÑÌäº ÏÑ†ÌÉù Ìï¥Ï†ú
                } else {
                    this.textContent = 'ÏßÄÏö∞Í∞ú ÏºúÍ∏∞';
                }
            });

            document.querySelectorAll('.color-button').forEach(button => {
                button.addEventListener('click', function() {
                    document.querySelectorAll('.color-button').forEach(btn => btn.classList.remove('selected')); // Í∏∞Ï°¥Ïóê Ï≤¥ÌÅ¨ÎêòÏóàÎçò ÏÉâÏÉÅÏùÄ Ìï¥Ï†ú
                    this.classList.add('selected'); // ÏÑ†ÌÉùÌïúÍ±¥ Ï≤¥ÌÅ¨ÌëúÏãú ÎÇòÏò§Í≤å
                    strokeStyle = this.getAttribute('data-color'); // data-color ÏÜçÏÑ±Í∞íÏúºÎ°ú ÏßÄÏ†ïÌïú ÏÑπÏÉÅÎ≥ÄÍ≤Ω
                    isErasing = false;  // ÏßÄÏö∞Í∞ú Î™®ÎìúÎ•º Ìï¥Ï†ú
                });
            });



            drawingCanvas.addEventListener('mousedown', handleMouseDown);
            drawingCanvas.addEventListener('mousemove', handleMouseMove);
            drawingCanvas.addEventListener('mouseup', handleMouseUp);
            drawingCanvas.addEventListener('mouseleave', handleMouseLeave);



            document.getElementById('allclear').addEventListener('click', function() {
                drawingContext.clearRect(0, 0, drawingCanvas.width, drawingCanvas.height);
            }); // Î™®Îëê ÏßÄÏö∞Í∏∞


      </script>


<br><br>

### üßê Ïò§ÎäòÏùò ÏÜåÍ∞êÏùÄ?
ÏµúÏ¢ÖÏ†ÅÏúºÎ°ú Ïù¥ÎØ∏ÏßÄÎ•º ÌîÑÎ°úÏ†ùÌä∏ Ìè¥Îçî ÏïàÏóê public Ìè¥Îçî ÏïàÏóê ÏßÅÏ†ë ÏÇ¨ÏßÑÏùÑ ÎÑ£Ïñ¥ÏÑú ÏûëÏóÖÏùÑ Ìïú Î∂ÄÎ∂ÑÏù¥ ÏïÑÏâΩÍ∏¥ ÌïòÏßÄÎßå Í∑∏ÎûòÎèÑ Ïù¥ ÏΩîÎìú Ïù¥ÌõÑÏóê ÌôïÏû•ÏÑ±Ïù¥ Ï¢ãÎã§Í≥† ÏÉùÍ∞ÅÏùÑ ÌïòÍ∏∞ ÎñÑÎ¨∏Ïóê ÏÇ¥Ïßù ÎøåÎìØ... Ìï®Ïù¥ ÏûàÍ∏¥ Ìï©ÎãàÎã§. ÏµúÍ∑º ÌîåÎü¨ÌÑ∞Î°ú ÏûëÏóÖÏùÑ ÌïòÎã§Í∞Ä Ïù¥Î†áÍ≤å ÏõπÏúºÎ•¥ Ï°∞Í∏à Îã§Î£®ÎãàÍπå ÏÇ¥Ïßù Ïû¨ÎØ∏ÏûàÏñ¥ÏßÑ Í≤É Í∞ôÏïÑÏöî. ÏöîÏ¶ò ÏïÑÏßÅ Í∞ÑÎã®ÌïúÍ≤ÉÎßå ÌïòÎäîÎç∞ Í∑∏ÎûòÎèÑ Ï†êÏ†ê Ïñ¥Î†§Ïö¥ Í≤ÉÎèÑ Ìï¥ÎÇ¥Îäî ÏïÑÍ∏∞ Í∞úÎ∞úÏûêÍ∞Ä ÎêòÍ≥† Ïã∂Ïñ¥Ïöî!! Ïó¥Ïã¨Ìûà Îπ†ÏÉ§Îπ†ÏÉ§

<br>