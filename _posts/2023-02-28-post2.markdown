---
layout: post
title:  javascript operator
date:   2023-02-28 +0900
categories: javascript
---
<center>
  <img src="https://raw.githubusercontent.com/201960003/study_blog/main/img/post2/image.png?raw=true" alt="첫번째 사진">
</center>

## 목차 

1. [operator의 의미](#operator의-의미)
2. [연산자의 종류](#연산자의-종류)


<!-- <details><summary>
2. [연산자의 종류](#연산자의-종류)</summary>

<ul>
  <li>gkfekdd<li>
</ul>
</details> -->



### 1. operator의 의미
>**operator(연산자)란?**
>프로그램의 산술이나 연산식을 표현하고 처리하기 위해 제공되는 다양한 기호를 말합니다.

JavaScript는 이항 연산자와 단항 연산자를 모두 포함하며, 유일한 삼항 연산자로 조건 연산자도 가지고 있습니다.
이항 연산자는 총 두개의 피연산자가 필요합니다.

> **이항 연산자** : 피연산자1 연산자 피연산자2

이항 연산자의 예시로는 <code>3+3</code> or <code>a*b</code>가 있습니다.

> **단항 연산자** : 연산자 피연산자 or 피연산자 연산자

단항 연산자의 예시로는 <code>+3</code> or <code>-3</code>or <code>+*b</code>or<code>b++</code> 가 있습니다.


<span style="width:10px; background-color:#DCFFE4"> 참고! </span>
피연산자: 연산을 당하는 대상
단항 연산자: 피연산자 1개 필요 (피연산자가 1개인 연산자 -> 1개:단항)
이항 연산자: 피연산자 2개 필요 (피연산자가 2개인 연산자 -> 2개:이항)
삼항 연산자: 피연산자 3개 필요 (피연산자가 3개인 연산자 -> 3개:삼항)



### 2. 연산자의 종류
* [할당 연산자](#할당-연산자)
* [비교 연산자](#비교-연산자)
* [산술 연산자](#산술-연산자)
* [비트 연산자](#비트-연산자)
* [논리 연산자](#논리-연산자)
* [문자열 연산자](#문자열-연산자)
* [조건(삼항) 연산자](#조건(삼항)-연산자)
* [쉽표 연산자](#쉼표-연산자)
* [단항 연산자](#단항-연산자)
* [관계 연산자](#관계-연산자)


#### 할당 연산자
할당 연산자는 오른쪽 피연산자의 값을 왼쪽 피연산자에 할당합니다. 기본적인 할당 연산자는 오른쪽의 피연산자 값을 왼쪽 피연산자에 값에 할당하는 등호<code>=</code>로, <code>x = y</code>는 <code>y</code>의 값을 <code>x</code>에 할당합니다.

아래의 표에서 볼 수 있듯이 연산과 할당을 동시에 수행하는 복합 할당 연산자도 존재합니다.


  <!-- |         이름         |  단축 연산자  |   뜻   |
  |:---|:---|:---|
  ||||
  |||| -->
<table style="margin : auto; OR  ( margin-rigth : auto; margin-left : auto;"  >
  <thead>
    <tr>
      <th>이름</th>
      <th>단축 연산자</th>
      <th>뜻</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>할당</a></td>
      <td><code>x = y</code></td>
      <td><code>x = y</code></td>
    </tr>
    <tr>
      <td>더하기 할당</a></td>
      <td><code>x += y</code></td>
      <td><code>x = x + y</code></td>
    </tr>
    <tr>
      <td>빼기 할당</a></td>
      <td><code>x -= y</code></td>
      <td><code>x = x - y</code></td>
    </tr>
    <tr>
      <td>곱하기 할당</a></td>
      <td><code>x *= y</code></td>
      <td><code>x = x * y</code></td>
    </tr>
    <tr>
      <td>나누기 할당</a></td>
      <td><code>x /= y</code></td>
      <td><code>x = x / y</code></td>
    </tr>
    <tr>
      <td>나머지 할당</a></td>
      <td><code>x %= y</code></td>
      <td><code>x = x % y</code></td>
    </tr>
    <tr>
      <td>거듭제곱 할당</td>
      <td><code>x **= y</code></td>
      <td><code>x = x ** y</code></td>
    </tr>
    <tr>
      <td>왼쪽 시프트 할당</td>
      <td><code>x << y</code></td>
      <td><code>x = x << y</code></td>
    </tr>
    <tr>
      <td>오른쪽 시프트 할당</td>
      <td><code>x >>= y</code></td>
      <td><code>x = x >> y</code></td>
    </tr>
    <tr>
      <td>부호 없는 오른쪽 시프트 할당</td>
      <td><code>x >>>= y</code></td>
      <td><code>x = x >>> y</code></td>
    </tr>
    <tr>
      <td>비트 AND 할당</td>
      <td><code>x &= y</code></td>
      <td><code>x = x & y</code></td>
    </tr>
    <tr>
      <td>비트 XOR 할당</td>
      <td><code>x ^= y</code></td>
      <td><code>x = x ^ y</code></td>
    </tr>
    <tr>
      <td>비트 OR 할당</td>
      <td><code>x |= y</code></td>
      <td><code>x = x | y</code></td>
    </tr>
    <tr>
      <td>논리 AND 할당</td>
      <td><code>x &&= y</code></td>
      <td><code>x && (x = y)</code></td>
    </tr>
    <tr>
      <td>논리 OR 할당</td>
      <td><code>x ||= y</code></td>
      <td><code>x || (x = y)</code></td>
    </tr>
    <tr>
      <td>널 병합 할당 </td>
      <td><code>x ??= y</code></td>
      <td><code>x ?? (x = y)</code></td>
    </tr>
  </tbody>
</table>


#### 할당 연산자
